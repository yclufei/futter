gr_module("GmUtil")path = inherit():name("url");path.file_exists = function(self,path)  local file = io.open(path, "rb")  if file then file:close() end  return file ~= nilendpath.paramUrlToTable = function(self,url)	local tb = string.split(url,'?')	local ctb = string.split(tb[2],'&')	local resultb = {}	for _,v in pairs(ctb) do				local c = string.split(v,'=')		local key = c[1]		resultb[key] = c[2]	end	return resultbendpath.ParsePath = function(self,path)	local parsed = {}	path = path or ""	string.gsub(path, "([^/]+)", function (s) table.insert(parsed, s) end)	for i = 1, table.getn(parsed) do		parsed[i] = self:unescape(parsed[i])	end	if string.sub(path, 1, 1) == "\\" then parsed.is_absolute = 1 end	if string.sub(path, -1, -1) == "\\" then parsed.is_directory = 1 end	return parsedendpath.unescape = function(self,s)    return string.gsub(s, "%%(%x%x)", function(hex)        return string.char(base.tonumber(hex, 16))    end)endpath.escape = function(self,s)    return string.gsub(s, "([^A-Za-z0-9_])", function(c)        return string.format("%%%02x", string.byte(c))    end)endpath.unescape2 = function(self,s)    return string.gsub( s, "_(%x%x)", function(hex)        return string.char(tonumber(hex, 16))    end)endpath.escape2 = function(self,s)    local res =  string.gsub(s, "([^A-Za-z0-9])", function(c)    		local ret = string.format("%02x", string.byte(c))    		--print(c,ret)        return "%%"..ret    end)    --print(s,res)    return resendpath.mInstance = nilpath.GetInstance = function()	if GmUtil.path.mInstance == nil then		GmUtil.path.mInstance = GmUtil.path()	end 	return GmUtil.path.mInstanceend